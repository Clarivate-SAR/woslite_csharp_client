/* 
 * Web of Science API Lite
 *
 * A responsive API that supports rich searching across the Web of Science Core Collection to retrieve core article metadata.  This service provides a great way to reuse Web of Science data both internally and externally to enhance  institutional repositories and research networking systems with best-in-class data. This API supports searching across the Web of Science to retrieve item-level metadata with limited fields:  - UT (Unique Identifier) - Authors - Author keywords - Document type - Title - Issue - Pages - Publication date - Source title - Volume - DOI - ISBN - ISSN   The API supports JSON and XML responses, and this documentation supports trying both response types. 
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IIntegrationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Find record(s) by specific id
        /// </summary>
        /// <remarks>
        /// This operation returns a record identified by a unique identifier. You may specify multiple identifiers in a single request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseId">Database to search. Must be a valid database ID, one of the following: BCI/BIOABS/BIOSIS/CCC/DCI/DIIDW/MEDLINE/WOK/WOS/ZOOREC. WOK represents all databases.</param>
        /// <param name="uniqueId">Primary item(s) id to be searched, ex: WOS:000270372400005. Cannot be null or an empty string. Multiple values are separated by comma.</param>
        /// <param name="count">Number of records to return, must be 0-100.</param>
        /// <param name="firstRecord">Specific record, if any within the result set to return. Cannot be less than 1 and greater than 100000.</param>
        /// <param name="lang">Language of search. This element can take only one value: en for English. If no language is specified, English is passed by default. (optional)</param>
        /// <param name="sortField">Order by field(s). Field name and order by clause separated by &#x27;+&#x27;, use A for ASC and D for DESC, ex: PY+D. Multiple values are separated by comma. (optional)</param>
        /// <returns>WosLiteResponse</returns>
        WosLiteResponse IdUniqueIdGet (string databaseId, string uniqueId, int? count, int? firstRecord, string lang = null, string sortField = null);

        /// <summary>
        /// Find record(s) by specific id
        /// </summary>
        /// <remarks>
        /// This operation returns a record identified by a unique identifier. You may specify multiple identifiers in a single request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseId">Database to search. Must be a valid database ID, one of the following: BCI/BIOABS/BIOSIS/CCC/DCI/DIIDW/MEDLINE/WOK/WOS/ZOOREC. WOK represents all databases.</param>
        /// <param name="uniqueId">Primary item(s) id to be searched, ex: WOS:000270372400005. Cannot be null or an empty string. Multiple values are separated by comma.</param>
        /// <param name="count">Number of records to return, must be 0-100.</param>
        /// <param name="firstRecord">Specific record, if any within the result set to return. Cannot be less than 1 and greater than 100000.</param>
        /// <param name="lang">Language of search. This element can take only one value: en for English. If no language is specified, English is passed by default. (optional)</param>
        /// <param name="sortField">Order by field(s). Field name and order by clause separated by &#x27;+&#x27;, use A for ASC and D for DESC, ex: PY+D. Multiple values are separated by comma. (optional)</param>
        /// <returns>ApiResponse of WosLiteResponse</returns>
        ApiResponse<WosLiteResponse> IdUniqueIdGetWithHttpInfo (string databaseId, string uniqueId, int? count, int? firstRecord, string lang = null, string sortField = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Find record(s) by specific id
        /// </summary>
        /// <remarks>
        /// This operation returns a record identified by a unique identifier. You may specify multiple identifiers in a single request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseId">Database to search. Must be a valid database ID, one of the following: BCI/BIOABS/BIOSIS/CCC/DCI/DIIDW/MEDLINE/WOK/WOS/ZOOREC. WOK represents all databases.</param>
        /// <param name="uniqueId">Primary item(s) id to be searched, ex: WOS:000270372400005. Cannot be null or an empty string. Multiple values are separated by comma.</param>
        /// <param name="count">Number of records to return, must be 0-100.</param>
        /// <param name="firstRecord">Specific record, if any within the result set to return. Cannot be less than 1 and greater than 100000.</param>
        /// <param name="lang">Language of search. This element can take only one value: en for English. If no language is specified, English is passed by default. (optional)</param>
        /// <param name="sortField">Order by field(s). Field name and order by clause separated by &#x27;+&#x27;, use A for ASC and D for DESC, ex: PY+D. Multiple values are separated by comma. (optional)</param>
        /// <returns>Task of WosLiteResponse</returns>
        System.Threading.Tasks.Task<WosLiteResponse> IdUniqueIdGetAsync (string databaseId, string uniqueId, int? count, int? firstRecord, string lang = null, string sortField = null);

        /// <summary>
        /// Find record(s) by specific id
        /// </summary>
        /// <remarks>
        /// This operation returns a record identified by a unique identifier. You may specify multiple identifiers in a single request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseId">Database to search. Must be a valid database ID, one of the following: BCI/BIOABS/BIOSIS/CCC/DCI/DIIDW/MEDLINE/WOK/WOS/ZOOREC. WOK represents all databases.</param>
        /// <param name="uniqueId">Primary item(s) id to be searched, ex: WOS:000270372400005. Cannot be null or an empty string. Multiple values are separated by comma.</param>
        /// <param name="count">Number of records to return, must be 0-100.</param>
        /// <param name="firstRecord">Specific record, if any within the result set to return. Cannot be less than 1 and greater than 100000.</param>
        /// <param name="lang">Language of search. This element can take only one value: en for English. If no language is specified, English is passed by default. (optional)</param>
        /// <param name="sortField">Order by field(s). Field name and order by clause separated by &#x27;+&#x27;, use A for ASC and D for DESC, ex: PY+D. Multiple values are separated by comma. (optional)</param>
        /// <returns>Task of ApiResponse (WosLiteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WosLiteResponse>> IdUniqueIdGetAsyncWithHttpInfo (string databaseId, string uniqueId, int? count, int? firstRecord, string lang = null, string sortField = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class IntegrationApi : IIntegrationApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IntegrationApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationApi"/> class
        /// </summary>
        /// <returns></returns>
        public IntegrationApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IntegrationApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Find record(s) by specific id This operation returns a record identified by a unique identifier. You may specify multiple identifiers in a single request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseId">Database to search. Must be a valid database ID, one of the following: BCI/BIOABS/BIOSIS/CCC/DCI/DIIDW/MEDLINE/WOK/WOS/ZOOREC. WOK represents all databases.</param>
        /// <param name="uniqueId">Primary item(s) id to be searched, ex: WOS:000270372400005. Cannot be null or an empty string. Multiple values are separated by comma.</param>
        /// <param name="count">Number of records to return, must be 0-100.</param>
        /// <param name="firstRecord">Specific record, if any within the result set to return. Cannot be less than 1 and greater than 100000.</param>
        /// <param name="lang">Language of search. This element can take only one value: en for English. If no language is specified, English is passed by default. (optional)</param>
        /// <param name="sortField">Order by field(s). Field name and order by clause separated by &#x27;+&#x27;, use A for ASC and D for DESC, ex: PY+D. Multiple values are separated by comma. (optional)</param>
        /// <returns>WosLiteResponse</returns>
        public WosLiteResponse IdUniqueIdGet (string databaseId, string uniqueId, int? count, int? firstRecord, string lang = null, string sortField = null)
        {
             ApiResponse<WosLiteResponse> localVarResponse = IdUniqueIdGetWithHttpInfo(databaseId, uniqueId, count, firstRecord, lang, sortField);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find record(s) by specific id This operation returns a record identified by a unique identifier. You may specify multiple identifiers in a single request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseId">Database to search. Must be a valid database ID, one of the following: BCI/BIOABS/BIOSIS/CCC/DCI/DIIDW/MEDLINE/WOK/WOS/ZOOREC. WOK represents all databases.</param>
        /// <param name="uniqueId">Primary item(s) id to be searched, ex: WOS:000270372400005. Cannot be null or an empty string. Multiple values are separated by comma.</param>
        /// <param name="count">Number of records to return, must be 0-100.</param>
        /// <param name="firstRecord">Specific record, if any within the result set to return. Cannot be less than 1 and greater than 100000.</param>
        /// <param name="lang">Language of search. This element can take only one value: en for English. If no language is specified, English is passed by default. (optional)</param>
        /// <param name="sortField">Order by field(s). Field name and order by clause separated by &#x27;+&#x27;, use A for ASC and D for DESC, ex: PY+D. Multiple values are separated by comma. (optional)</param>
        /// <returns>ApiResponse of WosLiteResponse</returns>
        public ApiResponse< WosLiteResponse > IdUniqueIdGetWithHttpInfo (string databaseId, string uniqueId, int? count, int? firstRecord, string lang = null, string sortField = null)
        {
            // verify the required parameter 'databaseId' is set
            if (databaseId == null)
                throw new ApiException(400, "Missing required parameter 'databaseId' when calling IntegrationApi->IdUniqueIdGet");
            // verify the required parameter 'uniqueId' is set
            if (uniqueId == null)
                throw new ApiException(400, "Missing required parameter 'uniqueId' when calling IntegrationApi->IdUniqueIdGet");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling IntegrationApi->IdUniqueIdGet");
            // verify the required parameter 'firstRecord' is set
            if (firstRecord == null)
                throw new ApiException(400, "Missing required parameter 'firstRecord' when calling IntegrationApi->IdUniqueIdGet");

            var localVarPath = "/id/{uniqueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uniqueId != null) localVarPathParams.Add("uniqueId", this.Configuration.ApiClient.ParameterToString(uniqueId)); // path parameter
            if (databaseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "databaseId", databaseId)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (firstRecord != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstRecord", firstRecord)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortField", sortField)); // query parameter
            // authentication (key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ApiKey")))
            {
                localVarHeaderParams["X-ApiKey"] = this.Configuration.GetApiKeyWithPrefix("X-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IdUniqueIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WosLiteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WosLiteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WosLiteResponse)));
        }

        /// <summary>
        /// Find record(s) by specific id This operation returns a record identified by a unique identifier. You may specify multiple identifiers in a single request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseId">Database to search. Must be a valid database ID, one of the following: BCI/BIOABS/BIOSIS/CCC/DCI/DIIDW/MEDLINE/WOK/WOS/ZOOREC. WOK represents all databases.</param>
        /// <param name="uniqueId">Primary item(s) id to be searched, ex: WOS:000270372400005. Cannot be null or an empty string. Multiple values are separated by comma.</param>
        /// <param name="count">Number of records to return, must be 0-100.</param>
        /// <param name="firstRecord">Specific record, if any within the result set to return. Cannot be less than 1 and greater than 100000.</param>
        /// <param name="lang">Language of search. This element can take only one value: en for English. If no language is specified, English is passed by default. (optional)</param>
        /// <param name="sortField">Order by field(s). Field name and order by clause separated by &#x27;+&#x27;, use A for ASC and D for DESC, ex: PY+D. Multiple values are separated by comma. (optional)</param>
        /// <returns>Task of WosLiteResponse</returns>
        public async System.Threading.Tasks.Task<WosLiteResponse> IdUniqueIdGetAsync (string databaseId, string uniqueId, int? count, int? firstRecord, string lang = null, string sortField = null)
        {
             ApiResponse<WosLiteResponse> localVarResponse = await IdUniqueIdGetAsyncWithHttpInfo(databaseId, uniqueId, count, firstRecord, lang, sortField);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find record(s) by specific id This operation returns a record identified by a unique identifier. You may specify multiple identifiers in a single request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseId">Database to search. Must be a valid database ID, one of the following: BCI/BIOABS/BIOSIS/CCC/DCI/DIIDW/MEDLINE/WOK/WOS/ZOOREC. WOK represents all databases.</param>
        /// <param name="uniqueId">Primary item(s) id to be searched, ex: WOS:000270372400005. Cannot be null or an empty string. Multiple values are separated by comma.</param>
        /// <param name="count">Number of records to return, must be 0-100.</param>
        /// <param name="firstRecord">Specific record, if any within the result set to return. Cannot be less than 1 and greater than 100000.</param>
        /// <param name="lang">Language of search. This element can take only one value: en for English. If no language is specified, English is passed by default. (optional)</param>
        /// <param name="sortField">Order by field(s). Field name and order by clause separated by &#x27;+&#x27;, use A for ASC and D for DESC, ex: PY+D. Multiple values are separated by comma. (optional)</param>
        /// <returns>Task of ApiResponse (WosLiteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WosLiteResponse>> IdUniqueIdGetAsyncWithHttpInfo (string databaseId, string uniqueId, int? count, int? firstRecord, string lang = null, string sortField = null)
        {
            // verify the required parameter 'databaseId' is set
            if (databaseId == null)
                throw new ApiException(400, "Missing required parameter 'databaseId' when calling IntegrationApi->IdUniqueIdGet");
            // verify the required parameter 'uniqueId' is set
            if (uniqueId == null)
                throw new ApiException(400, "Missing required parameter 'uniqueId' when calling IntegrationApi->IdUniqueIdGet");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling IntegrationApi->IdUniqueIdGet");
            // verify the required parameter 'firstRecord' is set
            if (firstRecord == null)
                throw new ApiException(400, "Missing required parameter 'firstRecord' when calling IntegrationApi->IdUniqueIdGet");

            var localVarPath = "/id/{uniqueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uniqueId != null) localVarPathParams.Add("uniqueId", this.Configuration.ApiClient.ParameterToString(uniqueId)); // path parameter
            if (databaseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "databaseId", databaseId)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (firstRecord != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstRecord", firstRecord)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortField", sortField)); // query parameter
            // authentication (key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ApiKey")))
            {
                localVarHeaderParams["X-ApiKey"] = this.Configuration.GetApiKeyWithPrefix("X-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IdUniqueIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WosLiteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WosLiteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WosLiteResponse)));
        }

    }
}
