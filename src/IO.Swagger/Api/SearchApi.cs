/* 
 * Web of Science API Lite
 *
 * A responsive API that supports rich searching across the Web of Science Core Collection to retrieve core article metadata.  This service provides a great way to reuse Web of Science data both internally and externally to enhance  institutional repositories and research networking systems with best-in-class data. This API supports searching across the Web of Science to retrieve item-level metadata with limited fields:  - UT (Unique Identifier) - Authors - Author keywords - Document type - Title - Issue - Pages - Publication date - Source title - Volume - DOI - ISBN - ISSN   The API supports JSON and XML responses, and this documentation supports trying both response types. 
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISearchApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Fetch record(s) by query identifier
        /// </summary>
        /// <remarks>
        /// This operation returns record(s) identified by a query identifier.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryId">Retrieve records based on query identifier.</param>
        /// <param name="count">Number of records to return, must be 0-100.</param>
        /// <param name="firstRecord">Specific record, if any within the result set to return. Cannot be less than 1 and greater than 100000.</param>
        /// <param name="sortField">Order by field(s). Field name and order by clause separated by &#x27;+&#x27;, use A for ASC and D for DESC, ex: PY+D. Multiple values are separated by comma. If sortField was set on the original query, this parameter should be set as sorting is not a property of the query. (optional)</param>
        /// <returns>WosLiteResponse</returns>
        WosLiteResponse QueryQueryIdGet (int? queryId, int? count, int? firstRecord, string sortField = null);

        /// <summary>
        /// Fetch record(s) by query identifier
        /// </summary>
        /// <remarks>
        /// This operation returns record(s) identified by a query identifier.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryId">Retrieve records based on query identifier.</param>
        /// <param name="count">Number of records to return, must be 0-100.</param>
        /// <param name="firstRecord">Specific record, if any within the result set to return. Cannot be less than 1 and greater than 100000.</param>
        /// <param name="sortField">Order by field(s). Field name and order by clause separated by &#x27;+&#x27;, use A for ASC and D for DESC, ex: PY+D. Multiple values are separated by comma. If sortField was set on the original query, this parameter should be set as sorting is not a property of the query. (optional)</param>
        /// <returns>ApiResponse of WosLiteResponse</returns>
        ApiResponse<WosLiteResponse> QueryQueryIdGetWithHttpInfo (int? queryId, int? count, int? firstRecord, string sortField = null);
        /// <summary>
        /// Submits a user query and returns results
        /// </summary>
        /// <remarks>
        /// The search operation submits a search query to the specified database edition and retrieves data. This operation returns a query ID that can be used in subsequent operations to retrieve more records.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseId">Database to search. Must be a valid database ID, one of the following: BCI/BIOABS/BIOSIS/CCC/DCI/DIIDW/MEDLINE/WOK/WOS/ZOOREC. WOK represents all databases.</param>
        /// <param name="usrQuery">User query for requesting data, ex: TS&#x3D;(cadmium). The query parser will return errors for invalid queries.</param>
        /// <param name="count">Number of records to return, must be 0-100.</param>
        /// <param name="firstRecord">Specific record, if any within the result set to return. Cannot be less than 1 and greater than 100000.</param>
        /// <param name="lang">Language of search. This element can take only one value: en for English. If no language is specified, English is passed by default. (optional)</param>
        /// <param name="edition">Edition(s) to be searched. If null, user permissions will be substituted. Must include the name of the collection and edition name separated by &#x27;+&#x27;, ex: WOS+SCI. Multiple editions are separated by &#x27;,&#x27;. Editions available for collection(WOS) - AHCI,CCR,IC,ISSHP,ISTP,SCI,SSCI,BHCI,BSCI and ESCI. (optional)</param>
        /// <param name="publishTimeSpan">This element specifies a range of publication dates. If publishTimeSpan is used, the loadTimeSpan parameter must be omitted. If publishTimeSpan and loadTimeSpan are both omitted, then the maximum time span will be inferred from the editions data. Beginning and end dates should be specified in the yyyy-mm-dd format separated by +, ex: 1993-01-01+2009-12-31. (optional)</param>
        /// <param name="loadTimeSpan">Load time span (otherwise described as symbolic time span) defines a range of load dates. The load date is the date a record was added to the database. If load date is specified, the publishTimeSpan parameter must be omitted. If both publishTimeSpan and loadTimeSpan are omitted, the maximum publication date will be inferred from the editions data. Any of D/W/M/Y prefixed with a number where D-Day, M-Month, W-Week, Y-Year allowed. Acceptable value range for Day(0-6), Week(1-52), Month(1-12) and Year(0-10), ex: 5D,30W,10M,8Y. (optional)</param>
        /// <param name="sortField">Order by field(s). Field name and order by clause separated by &#x27;+&#x27;, use A for ASC and D for DESC, ex: PY+D. Multiple values are separated by comma. (optional)</param>
        /// <returns>WosLiteResponse</returns>
        WosLiteResponse RootGet (string databaseId, string usrQuery, int? count, int? firstRecord, string lang = null, string edition = null, string publishTimeSpan = null, string loadTimeSpan = null, string sortField = null);

        /// <summary>
        /// Submits a user query and returns results
        /// </summary>
        /// <remarks>
        /// The search operation submits a search query to the specified database edition and retrieves data. This operation returns a query ID that can be used in subsequent operations to retrieve more records.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseId">Database to search. Must be a valid database ID, one of the following: BCI/BIOABS/BIOSIS/CCC/DCI/DIIDW/MEDLINE/WOK/WOS/ZOOREC. WOK represents all databases.</param>
        /// <param name="usrQuery">User query for requesting data, ex: TS&#x3D;(cadmium). The query parser will return errors for invalid queries.</param>
        /// <param name="count">Number of records to return, must be 0-100.</param>
        /// <param name="firstRecord">Specific record, if any within the result set to return. Cannot be less than 1 and greater than 100000.</param>
        /// <param name="lang">Language of search. This element can take only one value: en for English. If no language is specified, English is passed by default. (optional)</param>
        /// <param name="edition">Edition(s) to be searched. If null, user permissions will be substituted. Must include the name of the collection and edition name separated by &#x27;+&#x27;, ex: WOS+SCI. Multiple editions are separated by &#x27;,&#x27;. Editions available for collection(WOS) - AHCI,CCR,IC,ISSHP,ISTP,SCI,SSCI,BHCI,BSCI and ESCI. (optional)</param>
        /// <param name="publishTimeSpan">This element specifies a range of publication dates. If publishTimeSpan is used, the loadTimeSpan parameter must be omitted. If publishTimeSpan and loadTimeSpan are both omitted, then the maximum time span will be inferred from the editions data. Beginning and end dates should be specified in the yyyy-mm-dd format separated by +, ex: 1993-01-01+2009-12-31. (optional)</param>
        /// <param name="loadTimeSpan">Load time span (otherwise described as symbolic time span) defines a range of load dates. The load date is the date a record was added to the database. If load date is specified, the publishTimeSpan parameter must be omitted. If both publishTimeSpan and loadTimeSpan are omitted, the maximum publication date will be inferred from the editions data. Any of D/W/M/Y prefixed with a number where D-Day, M-Month, W-Week, Y-Year allowed. Acceptable value range for Day(0-6), Week(1-52), Month(1-12) and Year(0-10), ex: 5D,30W,10M,8Y. (optional)</param>
        /// <param name="sortField">Order by field(s). Field name and order by clause separated by &#x27;+&#x27;, use A for ASC and D for DESC, ex: PY+D. Multiple values are separated by comma. (optional)</param>
        /// <returns>ApiResponse of WosLiteResponse</returns>
        ApiResponse<WosLiteResponse> RootGetWithHttpInfo (string databaseId, string usrQuery, int? count, int? firstRecord, string lang = null, string edition = null, string publishTimeSpan = null, string loadTimeSpan = null, string sortField = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Fetch record(s) by query identifier
        /// </summary>
        /// <remarks>
        /// This operation returns record(s) identified by a query identifier.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryId">Retrieve records based on query identifier.</param>
        /// <param name="count">Number of records to return, must be 0-100.</param>
        /// <param name="firstRecord">Specific record, if any within the result set to return. Cannot be less than 1 and greater than 100000.</param>
        /// <param name="sortField">Order by field(s). Field name and order by clause separated by &#x27;+&#x27;, use A for ASC and D for DESC, ex: PY+D. Multiple values are separated by comma. If sortField was set on the original query, this parameter should be set as sorting is not a property of the query. (optional)</param>
        /// <returns>Task of WosLiteResponse</returns>
        System.Threading.Tasks.Task<WosLiteResponse> QueryQueryIdGetAsync (int? queryId, int? count, int? firstRecord, string sortField = null);

        /// <summary>
        /// Fetch record(s) by query identifier
        /// </summary>
        /// <remarks>
        /// This operation returns record(s) identified by a query identifier.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryId">Retrieve records based on query identifier.</param>
        /// <param name="count">Number of records to return, must be 0-100.</param>
        /// <param name="firstRecord">Specific record, if any within the result set to return. Cannot be less than 1 and greater than 100000.</param>
        /// <param name="sortField">Order by field(s). Field name and order by clause separated by &#x27;+&#x27;, use A for ASC and D for DESC, ex: PY+D. Multiple values are separated by comma. If sortField was set on the original query, this parameter should be set as sorting is not a property of the query. (optional)</param>
        /// <returns>Task of ApiResponse (WosLiteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WosLiteResponse>> QueryQueryIdGetAsyncWithHttpInfo (int? queryId, int? count, int? firstRecord, string sortField = null);
        /// <summary>
        /// Submits a user query and returns results
        /// </summary>
        /// <remarks>
        /// The search operation submits a search query to the specified database edition and retrieves data. This operation returns a query ID that can be used in subsequent operations to retrieve more records.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseId">Database to search. Must be a valid database ID, one of the following: BCI/BIOABS/BIOSIS/CCC/DCI/DIIDW/MEDLINE/WOK/WOS/ZOOREC. WOK represents all databases.</param>
        /// <param name="usrQuery">User query for requesting data, ex: TS&#x3D;(cadmium). The query parser will return errors for invalid queries.</param>
        /// <param name="count">Number of records to return, must be 0-100.</param>
        /// <param name="firstRecord">Specific record, if any within the result set to return. Cannot be less than 1 and greater than 100000.</param>
        /// <param name="lang">Language of search. This element can take only one value: en for English. If no language is specified, English is passed by default. (optional)</param>
        /// <param name="edition">Edition(s) to be searched. If null, user permissions will be substituted. Must include the name of the collection and edition name separated by &#x27;+&#x27;, ex: WOS+SCI. Multiple editions are separated by &#x27;,&#x27;. Editions available for collection(WOS) - AHCI,CCR,IC,ISSHP,ISTP,SCI,SSCI,BHCI,BSCI and ESCI. (optional)</param>
        /// <param name="publishTimeSpan">This element specifies a range of publication dates. If publishTimeSpan is used, the loadTimeSpan parameter must be omitted. If publishTimeSpan and loadTimeSpan are both omitted, then the maximum time span will be inferred from the editions data. Beginning and end dates should be specified in the yyyy-mm-dd format separated by +, ex: 1993-01-01+2009-12-31. (optional)</param>
        /// <param name="loadTimeSpan">Load time span (otherwise described as symbolic time span) defines a range of load dates. The load date is the date a record was added to the database. If load date is specified, the publishTimeSpan parameter must be omitted. If both publishTimeSpan and loadTimeSpan are omitted, the maximum publication date will be inferred from the editions data. Any of D/W/M/Y prefixed with a number where D-Day, M-Month, W-Week, Y-Year allowed. Acceptable value range for Day(0-6), Week(1-52), Month(1-12) and Year(0-10), ex: 5D,30W,10M,8Y. (optional)</param>
        /// <param name="sortField">Order by field(s). Field name and order by clause separated by &#x27;+&#x27;, use A for ASC and D for DESC, ex: PY+D. Multiple values are separated by comma. (optional)</param>
        /// <returns>Task of WosLiteResponse</returns>
        System.Threading.Tasks.Task<WosLiteResponse> RootGetAsync (string databaseId, string usrQuery, int? count, int? firstRecord, string lang = null, string edition = null, string publishTimeSpan = null, string loadTimeSpan = null, string sortField = null);

        /// <summary>
        /// Submits a user query and returns results
        /// </summary>
        /// <remarks>
        /// The search operation submits a search query to the specified database edition and retrieves data. This operation returns a query ID that can be used in subsequent operations to retrieve more records.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseId">Database to search. Must be a valid database ID, one of the following: BCI/BIOABS/BIOSIS/CCC/DCI/DIIDW/MEDLINE/WOK/WOS/ZOOREC. WOK represents all databases.</param>
        /// <param name="usrQuery">User query for requesting data, ex: TS&#x3D;(cadmium). The query parser will return errors for invalid queries.</param>
        /// <param name="count">Number of records to return, must be 0-100.</param>
        /// <param name="firstRecord">Specific record, if any within the result set to return. Cannot be less than 1 and greater than 100000.</param>
        /// <param name="lang">Language of search. This element can take only one value: en for English. If no language is specified, English is passed by default. (optional)</param>
        /// <param name="edition">Edition(s) to be searched. If null, user permissions will be substituted. Must include the name of the collection and edition name separated by &#x27;+&#x27;, ex: WOS+SCI. Multiple editions are separated by &#x27;,&#x27;. Editions available for collection(WOS) - AHCI,CCR,IC,ISSHP,ISTP,SCI,SSCI,BHCI,BSCI and ESCI. (optional)</param>
        /// <param name="publishTimeSpan">This element specifies a range of publication dates. If publishTimeSpan is used, the loadTimeSpan parameter must be omitted. If publishTimeSpan and loadTimeSpan are both omitted, then the maximum time span will be inferred from the editions data. Beginning and end dates should be specified in the yyyy-mm-dd format separated by +, ex: 1993-01-01+2009-12-31. (optional)</param>
        /// <param name="loadTimeSpan">Load time span (otherwise described as symbolic time span) defines a range of load dates. The load date is the date a record was added to the database. If load date is specified, the publishTimeSpan parameter must be omitted. If both publishTimeSpan and loadTimeSpan are omitted, the maximum publication date will be inferred from the editions data. Any of D/W/M/Y prefixed with a number where D-Day, M-Month, W-Week, Y-Year allowed. Acceptable value range for Day(0-6), Week(1-52), Month(1-12) and Year(0-10), ex: 5D,30W,10M,8Y. (optional)</param>
        /// <param name="sortField">Order by field(s). Field name and order by clause separated by &#x27;+&#x27;, use A for ASC and D for DESC, ex: PY+D. Multiple values are separated by comma. (optional)</param>
        /// <returns>Task of ApiResponse (WosLiteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WosLiteResponse>> RootGetAsyncWithHttpInfo (string databaseId, string usrQuery, int? count, int? firstRecord, string lang = null, string edition = null, string publishTimeSpan = null, string loadTimeSpan = null, string sortField = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SearchApi : ISearchApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// </summary>
        /// <returns></returns>
        public SearchApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SearchApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Fetch record(s) by query identifier This operation returns record(s) identified by a query identifier.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryId">Retrieve records based on query identifier.</param>
        /// <param name="count">Number of records to return, must be 0-100.</param>
        /// <param name="firstRecord">Specific record, if any within the result set to return. Cannot be less than 1 and greater than 100000.</param>
        /// <param name="sortField">Order by field(s). Field name and order by clause separated by &#x27;+&#x27;, use A for ASC and D for DESC, ex: PY+D. Multiple values are separated by comma. If sortField was set on the original query, this parameter should be set as sorting is not a property of the query. (optional)</param>
        /// <returns>WosLiteResponse</returns>
        public WosLiteResponse QueryQueryIdGet (int? queryId, int? count, int? firstRecord, string sortField = null)
        {
             ApiResponse<WosLiteResponse> localVarResponse = QueryQueryIdGetWithHttpInfo(queryId, count, firstRecord, sortField);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch record(s) by query identifier This operation returns record(s) identified by a query identifier.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryId">Retrieve records based on query identifier.</param>
        /// <param name="count">Number of records to return, must be 0-100.</param>
        /// <param name="firstRecord">Specific record, if any within the result set to return. Cannot be less than 1 and greater than 100000.</param>
        /// <param name="sortField">Order by field(s). Field name and order by clause separated by &#x27;+&#x27;, use A for ASC and D for DESC, ex: PY+D. Multiple values are separated by comma. If sortField was set on the original query, this parameter should be set as sorting is not a property of the query. (optional)</param>
        /// <returns>ApiResponse of WosLiteResponse</returns>
        public ApiResponse< WosLiteResponse > QueryQueryIdGetWithHttpInfo (int? queryId, int? count, int? firstRecord, string sortField = null)
        {
            // verify the required parameter 'queryId' is set
            if (queryId == null)
                throw new ApiException(400, "Missing required parameter 'queryId' when calling SearchApi->QueryQueryIdGet");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling SearchApi->QueryQueryIdGet");
            // verify the required parameter 'firstRecord' is set
            if (firstRecord == null)
                throw new ApiException(400, "Missing required parameter 'firstRecord' when calling SearchApi->QueryQueryIdGet");

            var localVarPath = "/query/{queryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queryId != null) localVarPathParams.Add("queryId", this.Configuration.ApiClient.ParameterToString(queryId)); // path parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (firstRecord != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstRecord", firstRecord)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortField", sortField)); // query parameter
            // authentication (key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ApiKey")))
            {
                localVarHeaderParams["X-ApiKey"] = this.Configuration.GetApiKeyWithPrefix("X-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueryQueryIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WosLiteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WosLiteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WosLiteResponse)));
        }

        /// <summary>
        /// Fetch record(s) by query identifier This operation returns record(s) identified by a query identifier.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryId">Retrieve records based on query identifier.</param>
        /// <param name="count">Number of records to return, must be 0-100.</param>
        /// <param name="firstRecord">Specific record, if any within the result set to return. Cannot be less than 1 and greater than 100000.</param>
        /// <param name="sortField">Order by field(s). Field name and order by clause separated by &#x27;+&#x27;, use A for ASC and D for DESC, ex: PY+D. Multiple values are separated by comma. If sortField was set on the original query, this parameter should be set as sorting is not a property of the query. (optional)</param>
        /// <returns>Task of WosLiteResponse</returns>
        public async System.Threading.Tasks.Task<WosLiteResponse> QueryQueryIdGetAsync (int? queryId, int? count, int? firstRecord, string sortField = null)
        {
             ApiResponse<WosLiteResponse> localVarResponse = await QueryQueryIdGetAsyncWithHttpInfo(queryId, count, firstRecord, sortField);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch record(s) by query identifier This operation returns record(s) identified by a query identifier.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryId">Retrieve records based on query identifier.</param>
        /// <param name="count">Number of records to return, must be 0-100.</param>
        /// <param name="firstRecord">Specific record, if any within the result set to return. Cannot be less than 1 and greater than 100000.</param>
        /// <param name="sortField">Order by field(s). Field name and order by clause separated by &#x27;+&#x27;, use A for ASC and D for DESC, ex: PY+D. Multiple values are separated by comma. If sortField was set on the original query, this parameter should be set as sorting is not a property of the query. (optional)</param>
        /// <returns>Task of ApiResponse (WosLiteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WosLiteResponse>> QueryQueryIdGetAsyncWithHttpInfo (int? queryId, int? count, int? firstRecord, string sortField = null)
        {
            // verify the required parameter 'queryId' is set
            if (queryId == null)
                throw new ApiException(400, "Missing required parameter 'queryId' when calling SearchApi->QueryQueryIdGet");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling SearchApi->QueryQueryIdGet");
            // verify the required parameter 'firstRecord' is set
            if (firstRecord == null)
                throw new ApiException(400, "Missing required parameter 'firstRecord' when calling SearchApi->QueryQueryIdGet");

            var localVarPath = "/query/{queryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queryId != null) localVarPathParams.Add("queryId", this.Configuration.ApiClient.ParameterToString(queryId)); // path parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (firstRecord != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstRecord", firstRecord)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortField", sortField)); // query parameter
            // authentication (key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ApiKey")))
            {
                localVarHeaderParams["X-ApiKey"] = this.Configuration.GetApiKeyWithPrefix("X-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueryQueryIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WosLiteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WosLiteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WosLiteResponse)));
        }

        /// <summary>
        /// Submits a user query and returns results The search operation submits a search query to the specified database edition and retrieves data. This operation returns a query ID that can be used in subsequent operations to retrieve more records.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseId">Database to search. Must be a valid database ID, one of the following: BCI/BIOABS/BIOSIS/CCC/DCI/DIIDW/MEDLINE/WOK/WOS/ZOOREC. WOK represents all databases.</param>
        /// <param name="usrQuery">User query for requesting data, ex: TS&#x3D;(cadmium). The query parser will return errors for invalid queries.</param>
        /// <param name="count">Number of records to return, must be 0-100.</param>
        /// <param name="firstRecord">Specific record, if any within the result set to return. Cannot be less than 1 and greater than 100000.</param>
        /// <param name="lang">Language of search. This element can take only one value: en for English. If no language is specified, English is passed by default. (optional)</param>
        /// <param name="edition">Edition(s) to be searched. If null, user permissions will be substituted. Must include the name of the collection and edition name separated by &#x27;+&#x27;, ex: WOS+SCI. Multiple editions are separated by &#x27;,&#x27;. Editions available for collection(WOS) - AHCI,CCR,IC,ISSHP,ISTP,SCI,SSCI,BHCI,BSCI and ESCI. (optional)</param>
        /// <param name="publishTimeSpan">This element specifies a range of publication dates. If publishTimeSpan is used, the loadTimeSpan parameter must be omitted. If publishTimeSpan and loadTimeSpan are both omitted, then the maximum time span will be inferred from the editions data. Beginning and end dates should be specified in the yyyy-mm-dd format separated by +, ex: 1993-01-01+2009-12-31. (optional)</param>
        /// <param name="loadTimeSpan">Load time span (otherwise described as symbolic time span) defines a range of load dates. The load date is the date a record was added to the database. If load date is specified, the publishTimeSpan parameter must be omitted. If both publishTimeSpan and loadTimeSpan are omitted, the maximum publication date will be inferred from the editions data. Any of D/W/M/Y prefixed with a number where D-Day, M-Month, W-Week, Y-Year allowed. Acceptable value range for Day(0-6), Week(1-52), Month(1-12) and Year(0-10), ex: 5D,30W,10M,8Y. (optional)</param>
        /// <param name="sortField">Order by field(s). Field name and order by clause separated by &#x27;+&#x27;, use A for ASC and D for DESC, ex: PY+D. Multiple values are separated by comma. (optional)</param>
        /// <returns>WosLiteResponse</returns>
        public WosLiteResponse RootGet (string databaseId, string usrQuery, int? count, int? firstRecord, string lang = null, string edition = null, string publishTimeSpan = null, string loadTimeSpan = null, string sortField = null)
        {
             ApiResponse<WosLiteResponse> localVarResponse = RootGetWithHttpInfo(databaseId, usrQuery, count, firstRecord, lang, edition, publishTimeSpan, loadTimeSpan, sortField);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Submits a user query and returns results The search operation submits a search query to the specified database edition and retrieves data. This operation returns a query ID that can be used in subsequent operations to retrieve more records.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseId">Database to search. Must be a valid database ID, one of the following: BCI/BIOABS/BIOSIS/CCC/DCI/DIIDW/MEDLINE/WOK/WOS/ZOOREC. WOK represents all databases.</param>
        /// <param name="usrQuery">User query for requesting data, ex: TS&#x3D;(cadmium). The query parser will return errors for invalid queries.</param>
        /// <param name="count">Number of records to return, must be 0-100.</param>
        /// <param name="firstRecord">Specific record, if any within the result set to return. Cannot be less than 1 and greater than 100000.</param>
        /// <param name="lang">Language of search. This element can take only one value: en for English. If no language is specified, English is passed by default. (optional)</param>
        /// <param name="edition">Edition(s) to be searched. If null, user permissions will be substituted. Must include the name of the collection and edition name separated by &#x27;+&#x27;, ex: WOS+SCI. Multiple editions are separated by &#x27;,&#x27;. Editions available for collection(WOS) - AHCI,CCR,IC,ISSHP,ISTP,SCI,SSCI,BHCI,BSCI and ESCI. (optional)</param>
        /// <param name="publishTimeSpan">This element specifies a range of publication dates. If publishTimeSpan is used, the loadTimeSpan parameter must be omitted. If publishTimeSpan and loadTimeSpan are both omitted, then the maximum time span will be inferred from the editions data. Beginning and end dates should be specified in the yyyy-mm-dd format separated by +, ex: 1993-01-01+2009-12-31. (optional)</param>
        /// <param name="loadTimeSpan">Load time span (otherwise described as symbolic time span) defines a range of load dates. The load date is the date a record was added to the database. If load date is specified, the publishTimeSpan parameter must be omitted. If both publishTimeSpan and loadTimeSpan are omitted, the maximum publication date will be inferred from the editions data. Any of D/W/M/Y prefixed with a number where D-Day, M-Month, W-Week, Y-Year allowed. Acceptable value range for Day(0-6), Week(1-52), Month(1-12) and Year(0-10), ex: 5D,30W,10M,8Y. (optional)</param>
        /// <param name="sortField">Order by field(s). Field name and order by clause separated by &#x27;+&#x27;, use A for ASC and D for DESC, ex: PY+D. Multiple values are separated by comma. (optional)</param>
        /// <returns>ApiResponse of WosLiteResponse</returns>
        public ApiResponse< WosLiteResponse > RootGetWithHttpInfo (string databaseId, string usrQuery, int? count, int? firstRecord, string lang = null, string edition = null, string publishTimeSpan = null, string loadTimeSpan = null, string sortField = null)
        {
            // verify the required parameter 'databaseId' is set
            if (databaseId == null)
                throw new ApiException(400, "Missing required parameter 'databaseId' when calling SearchApi->RootGet");
            // verify the required parameter 'usrQuery' is set
            if (usrQuery == null)
                throw new ApiException(400, "Missing required parameter 'usrQuery' when calling SearchApi->RootGet");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling SearchApi->RootGet");
            // verify the required parameter 'firstRecord' is set
            if (firstRecord == null)
                throw new ApiException(400, "Missing required parameter 'firstRecord' when calling SearchApi->RootGet");

            var localVarPath = "/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (databaseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "databaseId", databaseId)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (usrQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usrQuery", usrQuery)); // query parameter
            if (edition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "edition", edition)); // query parameter
            if (publishTimeSpan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "publishTimeSpan", publishTimeSpan)); // query parameter
            if (loadTimeSpan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loadTimeSpan", loadTimeSpan)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (firstRecord != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstRecord", firstRecord)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortField", sortField)); // query parameter
            // authentication (key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ApiKey")))
            {
                localVarHeaderParams["X-ApiKey"] = this.Configuration.GetApiKeyWithPrefix("X-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RootGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WosLiteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WosLiteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WosLiteResponse)));
        }

        /// <summary>
        /// Submits a user query and returns results The search operation submits a search query to the specified database edition and retrieves data. This operation returns a query ID that can be used in subsequent operations to retrieve more records.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseId">Database to search. Must be a valid database ID, one of the following: BCI/BIOABS/BIOSIS/CCC/DCI/DIIDW/MEDLINE/WOK/WOS/ZOOREC. WOK represents all databases.</param>
        /// <param name="usrQuery">User query for requesting data, ex: TS&#x3D;(cadmium). The query parser will return errors for invalid queries.</param>
        /// <param name="count">Number of records to return, must be 0-100.</param>
        /// <param name="firstRecord">Specific record, if any within the result set to return. Cannot be less than 1 and greater than 100000.</param>
        /// <param name="lang">Language of search. This element can take only one value: en for English. If no language is specified, English is passed by default. (optional)</param>
        /// <param name="edition">Edition(s) to be searched. If null, user permissions will be substituted. Must include the name of the collection and edition name separated by &#x27;+&#x27;, ex: WOS+SCI. Multiple editions are separated by &#x27;,&#x27;. Editions available for collection(WOS) - AHCI,CCR,IC,ISSHP,ISTP,SCI,SSCI,BHCI,BSCI and ESCI. (optional)</param>
        /// <param name="publishTimeSpan">This element specifies a range of publication dates. If publishTimeSpan is used, the loadTimeSpan parameter must be omitted. If publishTimeSpan and loadTimeSpan are both omitted, then the maximum time span will be inferred from the editions data. Beginning and end dates should be specified in the yyyy-mm-dd format separated by +, ex: 1993-01-01+2009-12-31. (optional)</param>
        /// <param name="loadTimeSpan">Load time span (otherwise described as symbolic time span) defines a range of load dates. The load date is the date a record was added to the database. If load date is specified, the publishTimeSpan parameter must be omitted. If both publishTimeSpan and loadTimeSpan are omitted, the maximum publication date will be inferred from the editions data. Any of D/W/M/Y prefixed with a number where D-Day, M-Month, W-Week, Y-Year allowed. Acceptable value range for Day(0-6), Week(1-52), Month(1-12) and Year(0-10), ex: 5D,30W,10M,8Y. (optional)</param>
        /// <param name="sortField">Order by field(s). Field name and order by clause separated by &#x27;+&#x27;, use A for ASC and D for DESC, ex: PY+D. Multiple values are separated by comma. (optional)</param>
        /// <returns>Task of WosLiteResponse</returns>
        public async System.Threading.Tasks.Task<WosLiteResponse> RootGetAsync (string databaseId, string usrQuery, int? count, int? firstRecord, string lang = null, string edition = null, string publishTimeSpan = null, string loadTimeSpan = null, string sortField = null)
        {
             ApiResponse<WosLiteResponse> localVarResponse = await RootGetAsyncWithHttpInfo(databaseId, usrQuery, count, firstRecord, lang, edition, publishTimeSpan, loadTimeSpan, sortField);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Submits a user query and returns results The search operation submits a search query to the specified database edition and retrieves data. This operation returns a query ID that can be used in subsequent operations to retrieve more records.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseId">Database to search. Must be a valid database ID, one of the following: BCI/BIOABS/BIOSIS/CCC/DCI/DIIDW/MEDLINE/WOK/WOS/ZOOREC. WOK represents all databases.</param>
        /// <param name="usrQuery">User query for requesting data, ex: TS&#x3D;(cadmium). The query parser will return errors for invalid queries.</param>
        /// <param name="count">Number of records to return, must be 0-100.</param>
        /// <param name="firstRecord">Specific record, if any within the result set to return. Cannot be less than 1 and greater than 100000.</param>
        /// <param name="lang">Language of search. This element can take only one value: en for English. If no language is specified, English is passed by default. (optional)</param>
        /// <param name="edition">Edition(s) to be searched. If null, user permissions will be substituted. Must include the name of the collection and edition name separated by &#x27;+&#x27;, ex: WOS+SCI. Multiple editions are separated by &#x27;,&#x27;. Editions available for collection(WOS) - AHCI,CCR,IC,ISSHP,ISTP,SCI,SSCI,BHCI,BSCI and ESCI. (optional)</param>
        /// <param name="publishTimeSpan">This element specifies a range of publication dates. If publishTimeSpan is used, the loadTimeSpan parameter must be omitted. If publishTimeSpan and loadTimeSpan are both omitted, then the maximum time span will be inferred from the editions data. Beginning and end dates should be specified in the yyyy-mm-dd format separated by +, ex: 1993-01-01+2009-12-31. (optional)</param>
        /// <param name="loadTimeSpan">Load time span (otherwise described as symbolic time span) defines a range of load dates. The load date is the date a record was added to the database. If load date is specified, the publishTimeSpan parameter must be omitted. If both publishTimeSpan and loadTimeSpan are omitted, the maximum publication date will be inferred from the editions data. Any of D/W/M/Y prefixed with a number where D-Day, M-Month, W-Week, Y-Year allowed. Acceptable value range for Day(0-6), Week(1-52), Month(1-12) and Year(0-10), ex: 5D,30W,10M,8Y. (optional)</param>
        /// <param name="sortField">Order by field(s). Field name and order by clause separated by &#x27;+&#x27;, use A for ASC and D for DESC, ex: PY+D. Multiple values are separated by comma. (optional)</param>
        /// <returns>Task of ApiResponse (WosLiteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WosLiteResponse>> RootGetAsyncWithHttpInfo (string databaseId, string usrQuery, int? count, int? firstRecord, string lang = null, string edition = null, string publishTimeSpan = null, string loadTimeSpan = null, string sortField = null)
        {
            // verify the required parameter 'databaseId' is set
            if (databaseId == null)
                throw new ApiException(400, "Missing required parameter 'databaseId' when calling SearchApi->RootGet");
            // verify the required parameter 'usrQuery' is set
            if (usrQuery == null)
                throw new ApiException(400, "Missing required parameter 'usrQuery' when calling SearchApi->RootGet");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling SearchApi->RootGet");
            // verify the required parameter 'firstRecord' is set
            if (firstRecord == null)
                throw new ApiException(400, "Missing required parameter 'firstRecord' when calling SearchApi->RootGet");

            var localVarPath = "/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (databaseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "databaseId", databaseId)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (usrQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usrQuery", usrQuery)); // query parameter
            if (edition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "edition", edition)); // query parameter
            if (publishTimeSpan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "publishTimeSpan", publishTimeSpan)); // query parameter
            if (loadTimeSpan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loadTimeSpan", loadTimeSpan)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (firstRecord != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstRecord", firstRecord)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortField", sortField)); // query parameter
            // authentication (key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ApiKey")))
            {
                localVarHeaderParams["X-ApiKey"] = this.Configuration.GetApiKeyWithPrefix("X-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RootGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WosLiteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WosLiteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WosLiteResponse)));
        }

    }
}
