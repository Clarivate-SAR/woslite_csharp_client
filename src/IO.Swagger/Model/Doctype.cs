/* 
 * Web of Science API Lite
 *
 * A responsive API that supports rich searching across the Web of Science Core Collection to retrieve core article metadata.  This service provides a great way to reuse Web of Science data both internally and externally to enhance  institutional repositories and research networking systems with best-in-class data. This API supports searching across the Web of Science to retrieve item-level metadata with limited fields:  - UT (Unique Identifier) - Authors - Author keywords - Document type - Title - Issue - Pages - Publication date - Source title - Volume - DOI - ISBN - ISSN   The API supports JSON and XML responses, and this documentation supports trying both response types. 
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The document types of record
    /// </summary>
    [DataContract]
        public partial class Doctype :  IEquatable<Doctype>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Doctype" /> class.
        /// </summary>
        /// <param name="doctype">doctype.</param>
        public Doctype(List<string> doctype = default(List<string>))
        {
            this._Doctype = doctype;
        }
        
        /// <summary>
        /// Gets or Sets _Doctype
        /// </summary>
        [DataMember(Name="Doctype", EmitDefaultValue=false)]
        public List<string> _Doctype { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Doctype {\n");
            sb.Append("  _Doctype: ").Append(_Doctype).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Doctype);
        }

        /// <summary>
        /// Returns true if Doctype instances are equal
        /// </summary>
        /// <param name="input">Instance of Doctype to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Doctype input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._Doctype == input._Doctype ||
                    this._Doctype != null &&
                    input._Doctype != null &&
                    this._Doctype.SequenceEqual(input._Doctype)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Doctype != null)
                    hashCode = hashCode * 59 + this._Doctype.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
