/* 
 * Web of Science API Lite
 *
 * A responsive API that supports rich searching across the Web of Science Core Collection to retrieve core article metadata.  This service provides a great way to reuse Web of Science data both internally and externally to enhance  institutional repositories and research networking systems with best-in-class data. This API supports searching across the Web of Science to retrieve item-level metadata with limited fields:  - UT (Unique Identifier) - Authors - Author keywords - Document type - Title - Issue - Pages - Publication date - Source title - Volume - DOI - ISBN - ISSN   The API supports JSON and XML responses, and this documentation supports trying both response types. 
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// QueryResult
    /// </summary>
    [DataContract]
        public partial class QueryResult :  IEquatable<QueryResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryResult" /> class.
        /// </summary>
        /// <param name="queryID">The ID of the query that can be used for pagination. Please note that this id will not be available for a long time..</param>
        /// <param name="recordsSearched">The overrall number of records available in Web of Science..</param>
        /// <param name="recordsFound">The number of records of your request that are filtered through usrQuery but as well other query parameters..</param>
        public QueryResult(int? queryID = default(int?), long? recordsSearched = default(long?), long? recordsFound = default(long?))
        {
            this.QueryID = queryID;
            this.RecordsSearched = recordsSearched;
            this.RecordsFound = recordsFound;
        }
        
        /// <summary>
        /// The ID of the query that can be used for pagination. Please note that this id will not be available for a long time.
        /// </summary>
        /// <value>The ID of the query that can be used for pagination. Please note that this id will not be available for a long time.</value>
        [DataMember(Name="QueryID", EmitDefaultValue=false)]
        public int? QueryID { get; set; }

        /// <summary>
        /// The overrall number of records available in Web of Science.
        /// </summary>
        /// <value>The overrall number of records available in Web of Science.</value>
        [DataMember(Name="RecordsSearched", EmitDefaultValue=false)]
        public long? RecordsSearched { get; set; }

        /// <summary>
        /// The number of records of your request that are filtered through usrQuery but as well other query parameters.
        /// </summary>
        /// <value>The number of records of your request that are filtered through usrQuery but as well other query parameters.</value>
        [DataMember(Name="RecordsFound", EmitDefaultValue=false)]
        public long? RecordsFound { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueryResult {\n");
            sb.Append("  QueryID: ").Append(QueryID).Append("\n");
            sb.Append("  RecordsSearched: ").Append(RecordsSearched).Append("\n");
            sb.Append("  RecordsFound: ").Append(RecordsFound).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueryResult);
        }

        /// <summary>
        /// Returns true if QueryResult instances are equal
        /// </summary>
        /// <param name="input">Instance of QueryResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QueryID == input.QueryID ||
                    (this.QueryID != null &&
                    this.QueryID.Equals(input.QueryID))
                ) && 
                (
                    this.RecordsSearched == input.RecordsSearched ||
                    (this.RecordsSearched != null &&
                    this.RecordsSearched.Equals(input.RecordsSearched))
                ) && 
                (
                    this.RecordsFound == input.RecordsFound ||
                    (this.RecordsFound != null &&
                    this.RecordsFound.Equals(input.RecordsFound))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QueryID != null)
                    hashCode = hashCode * 59 + this.QueryID.GetHashCode();
                if (this.RecordsSearched != null)
                    hashCode = hashCode * 59 + this.RecordsSearched.GetHashCode();
                if (this.RecordsFound != null)
                    hashCode = hashCode * 59 + this.RecordsFound.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
