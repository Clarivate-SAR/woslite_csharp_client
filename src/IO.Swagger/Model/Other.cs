/* 
 * Web of Science API Lite
 *
 * A responsive API that supports rich searching across the Web of Science Core Collection to retrieve core article metadata.  This service provides a great way to reuse Web of Science data both internally and externally to enhance  institutional repositories and research networking systems with best-in-class data. This API supports searching across the Web of Science to retrieve item-level metadata with limited fields:  - UT (Unique Identifier) - Authors - Author keywords - Document type - Title - Issue - Pages - Publication date - Source title - Volume - DOI - ISBN - ISSN   The API supports JSON and XML responses, and this documentation supports trying both response types. 
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The source of this article; journal, book or medium in which the document was published
    /// </summary>
    [DataContract]
        public partial class Other :  IEquatable<Other>, IValidatableObject
    {
        /// <summary>
        /// Defines ResearcherIDDisclaimer
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ResearcherIDDisclaimerEnum
        {
            /// <summary>
            /// Enum Analytics for value: ResearcherID data provided by Clarivate Analytics
            /// </summary>
            [EnumMember(Value = "ResearcherID data provided by Clarivate Analytics")]
            Analytics = 1        }
        /// <summary>
        /// Dislaimer for ResearcherID
        /// </summary>
        /// <value>Dislaimer for ResearcherID</value>
        [DataMember(Name="ResearcherID.Disclaimer", EmitDefaultValue=false)]
        public List<ResearcherIDDisclaimerEnum> ResearcherIDDisclaimer { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Other" /> class.
        /// </summary>
        /// <param name="identifierEissn">Electronic International Standard Identifier Number. [What is an ISSN?](https://www.issn.org/understanding-the-issn/what-is-an-issn/).</param>
        /// <param name="contributorResearcherIDResearcherIDs">ResearcherID provided from Web of Science. [What is my Web of Science ResearcherID?](https://publons.freshdesk.com/support/solutions/articles/12000038281-what-is-my-web-of-science-researcherid-).</param>
        /// <param name="contributorResearcherIDNames">The author names in the same order from &#x60;Contributor.ResearcherID.ResearcherIDs&#x60;.</param>
        /// <param name="identifierDoi">Digital Object Identifier.</param>
        /// <param name="identifierIssn">International Standard Identifier Number. [What is an ISSN?](https://www.issn.org/understanding-the-issn/what-is-an-issn/).</param>
        /// <param name="identifierArticleNo">Article Number.</param>
        /// <param name="identifierIsbn">International Standard Book Number. [What is an ISBN?](https://www.isbn-international.org/content/what-isbn).</param>
        /// <param name="researcherIDDisclaimer">Dislaimer for ResearcherID.</param>
        /// <param name="identifierXrefDoi">Digital Object Identifier.</param>
        /// <param name="identifierIds">The IDS Number is included in the export from Web of Science to Researcher Solutions products. The ISI Document Delivery Number is used to uniquely identify documents that can be delivered via IDS. It is of no particular use if the user does not wish to use our document delivery..</param>
        public Other(List<string> identifierEissn = default(List<string>), List<string> contributorResearcherIDResearcherIDs = default(List<string>), List<string> contributorResearcherIDNames = default(List<string>), List<string> identifierDoi = default(List<string>), List<string> identifierIssn = default(List<string>), List<string> identifierArticleNo = default(List<string>), List<string> identifierIsbn = default(List<string>), List<ResearcherIDDisclaimerEnum> researcherIDDisclaimer = default(List<ResearcherIDDisclaimerEnum>), List<string> identifierXrefDoi = default(List<string>), List<string> identifierIds = default(List<string>))
        {
            this.IdentifierEissn = identifierEissn;
            this.ContributorResearcherIDResearcherIDs = contributorResearcherIDResearcherIDs;
            this.ContributorResearcherIDNames = contributorResearcherIDNames;
            this.IdentifierDoi = identifierDoi;
            this.IdentifierIssn = identifierIssn;
            this.IdentifierArticleNo = identifierArticleNo;
            this.IdentifierIsbn = identifierIsbn;
            this.ResearcherIDDisclaimer = researcherIDDisclaimer;
            this.IdentifierXrefDoi = identifierXrefDoi;
            this.IdentifierIds = identifierIds;
        }
        
        /// <summary>
        /// Electronic International Standard Identifier Number. [What is an ISSN?](https://www.issn.org/understanding-the-issn/what-is-an-issn/)
        /// </summary>
        /// <value>Electronic International Standard Identifier Number. [What is an ISSN?](https://www.issn.org/understanding-the-issn/what-is-an-issn/)</value>
        [DataMember(Name="Identifier.Eissn", EmitDefaultValue=false)]
        public List<string> IdentifierEissn { get; set; }

        /// <summary>
        /// ResearcherID provided from Web of Science. [What is my Web of Science ResearcherID?](https://publons.freshdesk.com/support/solutions/articles/12000038281-what-is-my-web-of-science-researcherid-)
        /// </summary>
        /// <value>ResearcherID provided from Web of Science. [What is my Web of Science ResearcherID?](https://publons.freshdesk.com/support/solutions/articles/12000038281-what-is-my-web-of-science-researcherid-)</value>
        [DataMember(Name="Contributor.ResearcherID.ResearcherIDs", EmitDefaultValue=false)]
        public List<string> ContributorResearcherIDResearcherIDs { get; set; }

        /// <summary>
        /// The author names in the same order from &#x60;Contributor.ResearcherID.ResearcherIDs&#x60;
        /// </summary>
        /// <value>The author names in the same order from &#x60;Contributor.ResearcherID.ResearcherIDs&#x60;</value>
        [DataMember(Name="Contributor.ResearcherID.Names", EmitDefaultValue=false)]
        public List<string> ContributorResearcherIDNames { get; set; }

        /// <summary>
        /// Digital Object Identifier
        /// </summary>
        /// <value>Digital Object Identifier</value>
        [DataMember(Name="Identifier.Doi", EmitDefaultValue=false)]
        public List<string> IdentifierDoi { get; set; }

        /// <summary>
        /// International Standard Identifier Number. [What is an ISSN?](https://www.issn.org/understanding-the-issn/what-is-an-issn/)
        /// </summary>
        /// <value>International Standard Identifier Number. [What is an ISSN?](https://www.issn.org/understanding-the-issn/what-is-an-issn/)</value>
        [DataMember(Name="Identifier.Issn", EmitDefaultValue=false)]
        public List<string> IdentifierIssn { get; set; }

        /// <summary>
        /// Article Number
        /// </summary>
        /// <value>Article Number</value>
        [DataMember(Name="Identifier.article_no", EmitDefaultValue=false)]
        public List<string> IdentifierArticleNo { get; set; }

        /// <summary>
        /// International Standard Book Number. [What is an ISBN?](https://www.isbn-international.org/content/what-isbn)
        /// </summary>
        /// <value>International Standard Book Number. [What is an ISBN?](https://www.isbn-international.org/content/what-isbn)</value>
        [DataMember(Name="Identifier.Isbn", EmitDefaultValue=false)]
        public List<string> IdentifierIsbn { get; set; }


        /// <summary>
        /// Digital Object Identifier
        /// </summary>
        /// <value>Digital Object Identifier</value>
        [DataMember(Name="Identifier.Xref_Doi", EmitDefaultValue=false)]
        public List<string> IdentifierXrefDoi { get; set; }

        /// <summary>
        /// The IDS Number is included in the export from Web of Science to Researcher Solutions products. The ISI Document Delivery Number is used to uniquely identify documents that can be delivered via IDS. It is of no particular use if the user does not wish to use our document delivery.
        /// </summary>
        /// <value>The IDS Number is included in the export from Web of Science to Researcher Solutions products. The ISI Document Delivery Number is used to uniquely identify documents that can be delivered via IDS. It is of no particular use if the user does not wish to use our document delivery.</value>
        [DataMember(Name="Identifier.Ids", EmitDefaultValue=false)]
        public List<string> IdentifierIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Other {\n");
            sb.Append("  IdentifierEissn: ").Append(IdentifierEissn).Append("\n");
            sb.Append("  ContributorResearcherIDResearcherIDs: ").Append(ContributorResearcherIDResearcherIDs).Append("\n");
            sb.Append("  ContributorResearcherIDNames: ").Append(ContributorResearcherIDNames).Append("\n");
            sb.Append("  IdentifierDoi: ").Append(IdentifierDoi).Append("\n");
            sb.Append("  IdentifierIssn: ").Append(IdentifierIssn).Append("\n");
            sb.Append("  IdentifierArticleNo: ").Append(IdentifierArticleNo).Append("\n");
            sb.Append("  IdentifierIsbn: ").Append(IdentifierIsbn).Append("\n");
            sb.Append("  ResearcherIDDisclaimer: ").Append(ResearcherIDDisclaimer).Append("\n");
            sb.Append("  IdentifierXrefDoi: ").Append(IdentifierXrefDoi).Append("\n");
            sb.Append("  IdentifierIds: ").Append(IdentifierIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Other);
        }

        /// <summary>
        /// Returns true if Other instances are equal
        /// </summary>
        /// <param name="input">Instance of Other to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Other input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IdentifierEissn == input.IdentifierEissn ||
                    this.IdentifierEissn != null &&
                    input.IdentifierEissn != null &&
                    this.IdentifierEissn.SequenceEqual(input.IdentifierEissn)
                ) && 
                (
                    this.ContributorResearcherIDResearcherIDs == input.ContributorResearcherIDResearcherIDs ||
                    this.ContributorResearcherIDResearcherIDs != null &&
                    input.ContributorResearcherIDResearcherIDs != null &&
                    this.ContributorResearcherIDResearcherIDs.SequenceEqual(input.ContributorResearcherIDResearcherIDs)
                ) && 
                (
                    this.ContributorResearcherIDNames == input.ContributorResearcherIDNames ||
                    this.ContributorResearcherIDNames != null &&
                    input.ContributorResearcherIDNames != null &&
                    this.ContributorResearcherIDNames.SequenceEqual(input.ContributorResearcherIDNames)
                ) && 
                (
                    this.IdentifierDoi == input.IdentifierDoi ||
                    this.IdentifierDoi != null &&
                    input.IdentifierDoi != null &&
                    this.IdentifierDoi.SequenceEqual(input.IdentifierDoi)
                ) && 
                (
                    this.IdentifierIssn == input.IdentifierIssn ||
                    this.IdentifierIssn != null &&
                    input.IdentifierIssn != null &&
                    this.IdentifierIssn.SequenceEqual(input.IdentifierIssn)
                ) && 
                (
                    this.IdentifierArticleNo == input.IdentifierArticleNo ||
                    this.IdentifierArticleNo != null &&
                    input.IdentifierArticleNo != null &&
                    this.IdentifierArticleNo.SequenceEqual(input.IdentifierArticleNo)
                ) && 
                (
                    this.IdentifierIsbn == input.IdentifierIsbn ||
                    this.IdentifierIsbn != null &&
                    input.IdentifierIsbn != null &&
                    this.IdentifierIsbn.SequenceEqual(input.IdentifierIsbn)
                ) && 
                (
                    this.ResearcherIDDisclaimer == input.ResearcherIDDisclaimer ||
                    this.ResearcherIDDisclaimer != null &&
                    input.ResearcherIDDisclaimer != null &&
                    this.ResearcherIDDisclaimer.SequenceEqual(input.ResearcherIDDisclaimer)
                ) && 
                (
                    this.IdentifierXrefDoi == input.IdentifierXrefDoi ||
                    this.IdentifierXrefDoi != null &&
                    input.IdentifierXrefDoi != null &&
                    this.IdentifierXrefDoi.SequenceEqual(input.IdentifierXrefDoi)
                ) && 
                (
                    this.IdentifierIds == input.IdentifierIds ||
                    this.IdentifierIds != null &&
                    input.IdentifierIds != null &&
                    this.IdentifierIds.SequenceEqual(input.IdentifierIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IdentifierEissn != null)
                    hashCode = hashCode * 59 + this.IdentifierEissn.GetHashCode();
                if (this.ContributorResearcherIDResearcherIDs != null)
                    hashCode = hashCode * 59 + this.ContributorResearcherIDResearcherIDs.GetHashCode();
                if (this.ContributorResearcherIDNames != null)
                    hashCode = hashCode * 59 + this.ContributorResearcherIDNames.GetHashCode();
                if (this.IdentifierDoi != null)
                    hashCode = hashCode * 59 + this.IdentifierDoi.GetHashCode();
                if (this.IdentifierIssn != null)
                    hashCode = hashCode * 59 + this.IdentifierIssn.GetHashCode();
                if (this.IdentifierArticleNo != null)
                    hashCode = hashCode * 59 + this.IdentifierArticleNo.GetHashCode();
                if (this.IdentifierIsbn != null)
                    hashCode = hashCode * 59 + this.IdentifierIsbn.GetHashCode();
                if (this.ResearcherIDDisclaimer != null)
                    hashCode = hashCode * 59 + this.ResearcherIDDisclaimer.GetHashCode();
                if (this.IdentifierXrefDoi != null)
                    hashCode = hashCode * 59 + this.IdentifierXrefDoi.GetHashCode();
                if (this.IdentifierIds != null)
                    hashCode = hashCode * 59 + this.IdentifierIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
