/* 
 * Web of Science API Lite
 *
 * A responsive API that supports rich searching across the Web of Science Core Collection to retrieve core article metadata.  This service provides a great way to reuse Web of Science data both internally and externally to enhance  institutional repositories and research networking systems with best-in-class data. This API supports searching across the Web of Science to retrieve item-level metadata with limited fields:  - UT (Unique Identifier) - Authors - Author keywords - Document type - Title - Issue - Pages - Publication date - Source title - Volume - DOI - ISBN - ISSN   The API supports JSON and XML responses, and this documentation supports trying both response types. 
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WosLiteRecord
    /// </summary>
    [DataContract]
        public partial class WosLiteRecord :  IEquatable<WosLiteRecord>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WosLiteRecord" /> class.
        /// </summary>
        /// <param name="uT">The unique identifier of Web of Science Record.</param>
        /// <param name="title">title.</param>
        /// <param name="doctype">doctype.</param>
        /// <param name="source">source.</param>
        /// <param name="author">author.</param>
        /// <param name="keyword">keyword.</param>
        /// <param name="other">other.</param>
        public WosLiteRecord(string uT = default(string), WosLiteRecordTitle title = default(WosLiteRecordTitle), Doctype doctype = default(Doctype), Source source = default(Source), Author author = default(Author), Keyword keyword = default(Keyword), Other other = default(Other))
        {
            this.UT = uT;
            this.Title = title;
            this.Doctype = doctype;
            this.Source = source;
            this.Author = author;
            this.Keyword = keyword;
            this.Other = other;
        }
        
        /// <summary>
        /// The unique identifier of Web of Science Record
        /// </summary>
        /// <value>The unique identifier of Web of Science Record</value>
        [DataMember(Name="UT", EmitDefaultValue=false)]
        public string UT { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="Title", EmitDefaultValue=false)]
        public WosLiteRecordTitle Title { get; set; }

        /// <summary>
        /// Gets or Sets Doctype
        /// </summary>
        [DataMember(Name="Doctype", EmitDefaultValue=false)]
        public Doctype Doctype { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="Source", EmitDefaultValue=false)]
        public Source Source { get; set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name="Author", EmitDefaultValue=false)]
        public Author Author { get; set; }

        /// <summary>
        /// Gets or Sets Keyword
        /// </summary>
        [DataMember(Name="Keyword", EmitDefaultValue=false)]
        public Keyword Keyword { get; set; }

        /// <summary>
        /// Gets or Sets Other
        /// </summary>
        [DataMember(Name="Other", EmitDefaultValue=false)]
        public Other Other { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WosLiteRecord {\n");
            sb.Append("  UT: ").Append(UT).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Doctype: ").Append(Doctype).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Keyword: ").Append(Keyword).Append("\n");
            sb.Append("  Other: ").Append(Other).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WosLiteRecord);
        }

        /// <summary>
        /// Returns true if WosLiteRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of WosLiteRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WosLiteRecord input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UT == input.UT ||
                    (this.UT != null &&
                    this.UT.Equals(input.UT))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Doctype == input.Doctype ||
                    (this.Doctype != null &&
                    this.Doctype.Equals(input.Doctype))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.Keyword == input.Keyword ||
                    (this.Keyword != null &&
                    this.Keyword.Equals(input.Keyword))
                ) && 
                (
                    this.Other == input.Other ||
                    (this.Other != null &&
                    this.Other.Equals(input.Other))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UT != null)
                    hashCode = hashCode * 59 + this.UT.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Doctype != null)
                    hashCode = hashCode * 59 + this.Doctype.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.Author != null)
                    hashCode = hashCode * 59 + this.Author.GetHashCode();
                if (this.Keyword != null)
                    hashCode = hashCode * 59 + this.Keyword.GetHashCode();
                if (this.Other != null)
                    hashCode = hashCode * 59 + this.Other.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
